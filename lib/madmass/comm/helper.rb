module Madmass
  module Comm
    # Comm helpers. This is where Socky methods are wrapped in helpers.
    module Helper

      # Sends an event to the controller.
      # Data typically is the percept generated by a mechanics action.
      def fire_event(event_id, data)
        # FIXME: resolve dependencies with specific client classes (i.e. GAME)
        "GAME.event('#{event_id}', #{data.to_json})"
      end

      ###############################################################################
      #            SOCKY METHODS

      # Sends js code to all clients registered to the public given channels.
      # You can use this method in 2 possible ways:
      #
      #  send_to_all([channels], 'some js code to execute on the client')
      #
      # or the block version:
      #
      #  send_to_all [channels] do |page|
      #    use the page builder like in rjs
      #  end
      #
      def send_to_all(channels, js_array = nil)
        raise "Madmass::Comm::Helper::sent_to_all: I do not accept a block!" if block_given?
        return if js_array.blank?
        js = js_array.join("\n ")
        PerceptionSender.send(js, :channels => stringify(environment_channels(channels)))
      end

      # Sends js code to all clients registered to the given private client channels.
      # You can use this method in 2 possible ways:
      #
      #  send_to_agent([clients], 'some js code to execute on the client')
      #
      # or the block version:
      #
      #  send_to_agent [clients] do |page|
      #    use the page builder like in rjs
      #  end
      #
      def send_to_agent(clients, js_array = nil)
        raise "Madmass::Comm::Helper::sent_to_agent: I do not accept a block!" if block_given?
        return if js_array.blank?
        js = js_array.join("\n ")
        PerceptionSender.send(js, :clients => stringify(environment_channels(clients)))
      end

      ###############################################################################
      #            NOTIFICATION METHODS

      # Notifies the errors.
      # clients => is the array of clients to notify.
      # errors => is a string or a hash of key (error type) value (error msg) errors
      #  def notify_errors(errors, clients)
      #    js = [fire_event('info_message', gather_errors(errors))]
      #    send_to_player(clients, js)
      #  end

      def html_errors(errors)
        messages = gather_errors(errors)
        html_out = '<div id="error_explanation"><ul>'
        html_out += messages.map {|msg| page_notification(msg)}.join
        html_out += '</ul></div>'
        return html_out.html_safe
      end


      private

      # Returns an array of error messages from the errors hash (from an action).
      # A single error message is a hash of this form:
      #
      # {
      #   :type => :type_specification,
      #   :msg => 'message text'
      # }
      #
      # errors parameter is a hash of:
      #   * strings: typically are messages from catastrophic errors
      #   * hash: {type => message, ...} typically are messages from action errors
      def gather_errors(errors)
        errors_messages = []
        errors.each do |id, error|
          case error
          when String
            errors_messages << {:type => :error, :msg => "#{error}"}
          when Hash
            error.each  do |id, msg|
              errors_messages << {:type => :warning, :msg => "#{msg}"}
            end
          end
        end
        return errors_messages
      end

      def page_notification(error)
        "<li><h2>#{error[:type]}</h2> <i>#{error[:msg]}</i></li>"
      end

      # Stringifies all the elements of the array
      def stringify(some_array)
        some_array.map{|elem| elem.to_s}
      end

      # Change the communication channel for Socky depending on the rails env.
      def environment_channels(channels)
        case Madmass.env
        when 'test'
          # test environment alter channels to avoid sending messages
          # to real players connected in the game room
          channels.map{|channel| "#{channel}_test"}
        else
          channels
        end
      end

    end

  end
end
